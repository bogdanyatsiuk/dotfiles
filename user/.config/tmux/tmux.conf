# ==========================
# ===  General settings  ===
# ==========================

# tmux display things in 256 colors
set -g default-terminal "xterm-256color"
set -as terminal-overrides ',xterm*:Tc:sitm=\E[3m'

set -g history-limit 20000
set -g buffer-limit 20
set -sg escape-time 0
set -g display-time 1500
set -g remain-on-exit off
set -g repeat-time 300
setw -g allow-rename on
setw -g automatic-rename on
setw -g aggressive-resize on

# Change prefix key to C-a
unbind C-b
# set -g prefix C-a
set-option -g prefix C-a

# Set parent terminal title to reflect current window in tmux session
set -g set-titles on
set -g set-titles-string "#I:#W"

# Start index of window/pane with 1, because we're humans, not computers
set -g base-index 1
setw -g pane-base-index 1

# Enable mouse support
set -g mouse on

# # Edit configuration and reload
bind C-e new-window -n 'tmux.conf' "sh -c '\${EDITOR:-vim} ~/.config/tmux/tmux.conf && tmux source ~/.config/tmux/tmux.conf && tmux display \"Config reloaded\"'"

# # Reload tmux configuration
bind C-r source-file ~/.config/tmux/tmux.conf \; display "Config reloaded"

# new window and retain cwd
bind c new-window -c "#{pane_current_path}"

# Prompt to rename window right after it's created
# set-hook -g after-new-window 'command-prompt -I "#{window_name}" "rename-window '%%'"'

# New window and retain cwd
unbind-key n
bind-key n new-window -c "#{pane_current_path}"

# Rename session and window
unbind-key r
bind r command-prompt -I "#{window_name}" "rename-window '%%'"
bind R command-prompt -I "#{session_name}" "rename-session '%%'"

# Automatically renumber window numbers on closing a pane
set-option -g renumber-windows on

# Switch to another session on closing last window of current session
set-option -g detach-on-destroy off

# Windows navigation
unbind-key ,
unbind-key .
bind -r , previous-window
bind -r . next-window

# Select last window
bind Tab last-window

# Split panes
bind | split-window -h -c "#{pane_current_path}"
bind _ split-window -v -c "#{pane_current_path}"

# Panes Navigation
unbind-key h
bind-key -r h select-pane -L
unbind-key j
bind-key -r j select-pane -D
unbind-key k
bind-key -r k select-pane -U
unbind-key l
bind-key -r l select-pane -R

# Resize Panes
bind -r C-h resize-pane -L 5
bind -r C-j resize-pane -D 5
bind -r C-k resize-pane -U 5
bind -r C-l resize-pane -R 5

# Close Pane / Window / Session
# x - kill pane by default
bind X confirm-before -p "kill-window #W? (y/n)" kill-window
bind M-x kill-pane
bind M-X kill-window
bind C-x confirm-before -p "kill other windows? (y/n)" "kill-window -a"
bind Q confirm-before -p "kill-session #S? (y/n)" kill-session

# No delay for escape key press
set -sg escape-time 0

# Use vi keybindings in copy and choice modes
setw -g mode-keys vi
# unbind [
# bind Escape copy-mode
unbind ]
unbind p
bind p paste-buffer
bind P choose-buffer
bind b list-buffers
bind-key -T copy-mode-vi 'v' send -X begin-selection     # Begin selection in copy mode.
bind-key -T copy-mode-vi 'y' send -X copy-selection      # Yank selection in copy mode.

# bind > swap-pane -D       # swap current pane with the next one
# bind < swap-pane -U       # swap current pane with the previous one

# Use vi keybindings for tmux commandline input.
# Note that to get command mode you need to hit ESC twice...
# set -g status-keys vi

# Link window
unbind L
bind L command-prompt -p "Link window from (session:window): " "link-window -s %% -a"
bind U unlink-window

# Swap panes back and forth with 1st pane
# When in main-(horizontal|vertical) layouts, the biggest/widest panel is always @1
bind '\' if '[ #{pane_index} -eq 1 ]' \
     'swap-pane -s "!"' \
     'select-pane -t:.1 ; swap-pane -d -t 1 -s "!"'

# Merge4444sion with another one (e.g. move all windows)
# If you use adhoc 1-window sessions, and you want to preserve session upon exit
# but don't want to create a lot of small unnamed 1-window sessions around
# move all windows from current session to main named one (dev, work, etc)
bind C-u command-prompt -p "Session to merge with: " \
   "run-shell 'yes | head -n #{session_windows} | xargs -I {} -n 1 tmux movew -t %%'"

bind-key O select-layout -o

set-option -w -g xterm-keys on

# Stay in copy mode on drag end.
# (Would use `bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X
# stop-selection` but it is a bit glitchy.)
unbind-key -T copy-mode-vi MouseDragEnd1Pane

bind-key K clear-history

bind H   join-pane -b -h -t !
bind J   join-pane -t !
bind B command-prompt -p "join pane from: "  "join-pane -s '%%'"

bind g new-window -c "#{pane_current_path}" -n 'lazygit' lazygit

# Activity
setw -g monitor-activity on
bind m setw monitor-activity \; display-message 'Monitor window activity [#{?monitor-activity,ON,OFF}]'
set -g visual-activity off



# bind -T root F12 next-window
## Also, change some visual styles when window keys are off
#bind -T root F12  \
#    set prefix None \;\
# set key-table off \;\
# set status-style "fg=yellow" \;\
#    echo "aaa"  \;\
#    set status-style "fg=$color_status_text,bg=$color_window_off_status_bg" \;\
#    set window-status-current-format "#[fg=$color_window_off_status_bg,bg=$color_window_off_status_current_bg]$separator_powerline_right#[default] #I:#W# #[fg=$color_window_off_status_current_bg,bg=$color_window_off_status_bg]$separator_powerline_right#[default]" \;\
#    set window-status-current-style "fg=$color_dark,bold,bg=$color_window_off_status_current_bg" \;\
#    if -F '#{pane_in_mode}' 'send-keys -X cancel' \;\
#    refresh-client -S \;\
#
#bind -T off F12 \
#  set -u prefix \;\
#  set -u key-table \;\
#  set -u status-style \;\
#  set -u window-status-current-style \;\
#  set -u window-status-current-format \;\
#  refresh-client -S

# Colors
set -g status-bg '#21295c' # color56
set -g status-fg '#f8f7ff' #  color15
set -g status-left-length 20
set -g status-left '#[bg=#0a0908]#[fg=#ff6d00][#S]▶︎'
set -g status-right '%a %H:%M, %d %b'

set -g window-status-format ' #I:#W#{?window_zoomed_flag,🔍, }'
set -g window-status-current-format '#[bg=#1c7293,fg=#f8f7ff] #I:#W#{?window_zoomed_flag,🔍, }'
set -g window-status-separator ''
set-window-option -g window-status-last-style fg=color229,bg='#21295c'

# Hide status bar on demand
bind C-s if -F '#{s/off//:status}' 'set status off' 'set status on'

source-file -q ~/.tmux-local.conf

# Session is considered to be remote when we ssh into host
if-shell 'test -n "$SSH_CLIENT"' \
    'source-file ~/.tmux/tmux.remote.conf'

# Better navigation: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
# bind-key -T copy-mode-vi 'C-\' select-pane -l


bind -T root F12 \
    set prefix None \;\
    set key-table off \;\
    set status-right '[OFF]  %a %H:%M, %d %b' \;\
    set status-bg '#4e596e' \;

bind -T off F12 \
    set -u prefix \;\
    set -u key-table \;\
    set -u status-right \;\
    set -u status-bg


# Tmux plugin manager
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'joshmedeski/t-smart-tmux-session-manager'
set -g @t-fzf-prompt '  '

# Initialize TMUX plugin manager
run '~/.config/tmux/plugins/tpm/tpm 
