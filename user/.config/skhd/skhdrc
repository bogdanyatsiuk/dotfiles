# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #

# Set layout of the space (options: bsp, float)
shift + alt + ctrl - u : yabai -m space --layout stack; ~/.config/sketchybar/plugins/yabai_mode.sh
shift + alt + ctrl - o : yabai -m space --layout bsp; ~/.config/sketchybar/plugins/yabai_mode.sh
shift + alt + ctrl - i : yabai -m space --layout float; ~/.config/sketchybar/plugins/yabai_mode.sh

# focus window
alt - h : yabai -m window --focus west
alt - j : yabai -m window --focus south
alt - k : yabai -m window --focus north
alt - l : yabai -m window --focus east

# swap managed window
shift + alt - h : yabai -m window --swap west
shift + alt - j : yabai -m window --swap south
shift + alt - k : yabai -m window --swap north
shift + alt - l : yabai -m window --swap east

# move managed window
shift + alt + ctrl - h : yabai -m window --warp west
shift + alt + ctrl - j : yabai -m window --warp south
shift + alt + ctrl - k : yabai -m window --warp north
shift + alt + ctrl - l : yabai -m window --warp east

# move window and focus desktop
shift + alt - 1 : ~/.config/yabai/scripts/send_window_to_space_and_focus.sh 1
shift + alt - 2 : ~/.config/yabai/scripts/send_window_to_space_and_focus.sh 2
shift + alt - 3 : ~/.config/yabai/scripts/send_window_to_space_and_focus.sh 3
shift + alt - 4 : ~/.config/yabai/scripts/send_window_to_space_and_focus.sh 4

# move window to space without focus
ctrl + shift + alt - 1 : yabai -m window --space 1
ctrl + shift + alt - 2 : yabai -m window --space 2
ctrl + shift + alt - 3 : yabai -m window --space 3
ctrl + shift + alt - 4 : yabai -m window --space 4

# balance size of windows
shift + alt - 0 : yabai -m space --balance

shift + alt - x : yabai -m space --mirror x-axis
shift + alt - y : yabai -m space --mirror y-axis

# Rotate the tree of the selected space by 90 degrees
shift + alt - r : yabai -m space --rotate 90

# Move floating window
# make floating window fill screen
cmd + alt - f     : yabai -m window --grid 1:1:0:0:1:1

# make floating window fill half of screen
cmd + alt - left  : yabai -m window --grid 1:2:0:0:1:1 # left
cmd + alt - right : yabai -m window --grid 1:2:1:0:1:1 # right
cmd + alt - up    : yabai -m window --grid 2:1:0:0:1:1 # up
cmd + alt - down  : yabai -m window --grid 2:1:0:1:1:1 # down
#
# make floating window fill third of screen
shift + alt - 7 : yabai -m window --grid 1:3:0:0:1:1 # left
shift + alt - 8 : yabai -m window --grid 1:3:1:0:1:1 # right
shift + alt - 9 : yabai -m window --grid 1:3:2:0:1:1 # up

# position current floating window at the center of the screen
shift + alt - c : ~/.config/yabai/scripts/center_window.sh

# create desktop, move window and follow focus - uses jq for parsing json (brew install jq)
# shift + cmd - n : yabai -m space --create && \
#                   index="$(yabai -m query --spaces --display | jq 'map(select(."native-fullscreen" == 0))[-1].index')" && \
#                   yabai -m window --space "${index}" && \
#                   yabai -m space --focus "${index}"

# fast focus desktop
# cmd + alt - x : yabai -m space --focus recent
# cmd + alt - 1 : yabai -m space --focus 1

# send window to desktop and follow focus
# shift + cmd - z : yabai -m window --space next; yabai -m space --focus next
# shift + cmd - 2 : yabai -m window --space  2; yabai -m space --focus 2

# focus monitor
shift + alt - 0x2F : yabai -m display --focus next # period
shift + alt - 0x2B : yabai -m display --focus prev # comma

# send window to monitor and follow focus
ctrl + cmd + alt - right : yabai -m window --display next; yabai -m display --focus next
ctrl + cmd + alt - left  : yabai -m window --display prev; yabai -m display --focus prev

# move floating window
shift + alt - a : yabai -m window --move rel:-20:0 # left
shift + alt - d : yabai -m window --move rel:20:0 # right
shift + alt - w : yabai -m window --move rel:0:-20 # up
shift + alt - s : yabai -m window --move rel:0:20 # down

# resize window
# Increase window size
ctrl + shift + alt - a : yabai -m window --resize left:-20:0
ctrl + shift + alt - d : yabai -m window --resize right:20:0
ctrl + shift + alt - w : yabai -m window --resize top:0:-20
ctrl + shift + alt - s : yabai -m window --resize bottom:0:20

# Decrease window size
cmd + shift + ctrl - a : yabai -m window --resize left:20:0
cmd + shift + ctrl - d : yabai -m window --resize right:-20:0
cmd + shift + ctrl - w : yabai -m window --resize top:0:20
cmd + shift + ctrl - s : yabai -m window --resize bottom:0:-20

# resize on both sides
ctrl + shift + alt - right : yabai -m window --move rel:-20:0; yabai -m window --resize right:40:0 # grow window horizontally
ctrl + shift + alt - left : yabai -m window --move rel:20:0; yabai -m window --resize right:-40:0 # shrink window horizontally
ctrl + shift + alt - up : yabai -m window --move rel:0:-20; yabai -m window --resize bottom:0:40 # grow window vertically
ctrl + shift + alt - down : yabai -m window --move rel:0:20; yabai -m window --resize bottom:0:-40 # shrink window vertically

# set insertion point in focused container
# ctrl + alt - h : yabai -m window --insert west

# toggle whether the focused window should be tiled (only on bsp spaces)
alt - d : yabai -m window --toggle float

# toggle window zoom
alt - z : yabai -m window --toggle zoom-parent
alt - f : yabai -m window --toggle zoom-fullscreen
shift + alt - f : yabai -m window --toggle native-fullscreen

# toggle window split type
alt - e : yabai -m window --toggle split

# toggle window border
shift + alt - b : yabai -m window --toggle border

# toggle padding and gap
shift + alt - g : yabai -m space --toggle padding; yabai -m space --toggle gap

# stack window
shift + ctrl - h : yabai -m window --stack west
shift + ctrl - j : yabai -m window --stack south
shift + ctrl - k : yabai -m window --stack north
shift + ctrl - l : yabai -m window --stack east

# Focus window up/down in stack
shift + alt - n : yabai -m window --focus stack.next
shift + alt - p : yabai -m window --focus stack.prev

# Focus window with stack index
shift + ctrl - 1 : ~/.config/yabai/scripts/focus_stack_index.sh 1
shift + ctrl - 2 : ~/.config/yabai/scripts/focus_stack_index.sh 2
shift + ctrl - 3 : ~/.config/yabai/scripts/focus_stack_index.sh 3
shift + ctrl - 4 : ~/.config/yabai/scripts/focus_stack_index.sh 4
shift + ctrl - 5 : ~/.config/yabai/scripts/focus_stack_index.sh 5
shift + ctrl - 6 : ~/.config/yabai/scripts/focus_stack_index.sh 6
shift + ctrl - 7 : ~/.config/yabai/scripts/focus_stack_index.sh 7
shift + ctrl - 8 : ~/.config/yabai/scripts/focus_stack_index.sh 8
shift + ctrl - 9 : ~/.config/yabai/scripts/focus_stack_index.sh 9

# float / unfloat window and center on screen
# alt - t : yabai -m window --toggle float;\
#           yabai -m window --grid 4:4:1:1:2:2

# toggle sticky(+float), topmost, picture-in-picture
# alt - p : yabai -m window --toggle sticky;\
#           yabai -m window --toggle topmost;\
#           yabai -m window --toggle pip

# restart yabai
ctrl + alt + shift - r : brew services restart yabai

